// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientServicesClient is the client API for ClientServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServicesClient interface {
	SubscribeService(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (*SubscribeEvent, error)
}

type clientServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServicesClient(cc grpc.ClientConnInterface) ClientServicesClient {
	return &clientServicesClient{cc}
}

func (c *clientServicesClient) SubscribeService(ctx context.Context, in *Subscribe, opts ...grpc.CallOption) (*SubscribeEvent, error) {
	out := new(SubscribeEvent)
	err := c.cc.Invoke(ctx, "/grpc.ClientServices/SubscribeService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServicesServer is the server API for ClientServices service.
// All implementations must embed UnimplementedClientServicesServer
// for forward compatibility
type ClientServicesServer interface {
	SubscribeService(context.Context, *Subscribe) (*SubscribeEvent, error)
	mustEmbedUnimplementedClientServicesServer()
}

// UnimplementedClientServicesServer must be embedded to have forward compatible implementations.
type UnimplementedClientServicesServer struct {
}

func (UnimplementedClientServicesServer) SubscribeService(context.Context, *Subscribe) (*SubscribeEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeService not implemented")
}
func (UnimplementedClientServicesServer) mustEmbedUnimplementedClientServicesServer() {}

// UnsafeClientServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServicesServer will
// result in compilation errors.
type UnsafeClientServicesServer interface {
	mustEmbedUnimplementedClientServicesServer()
}

func RegisterClientServicesServer(s grpc.ServiceRegistrar, srv ClientServicesServer) {
	s.RegisterService(&ClientServices_ServiceDesc, srv)
}

func _ClientServices_SubscribeService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscribe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServicesServer).SubscribeService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ClientServices/SubscribeService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServicesServer).SubscribeService(ctx, req.(*Subscribe))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientServices_ServiceDesc is the grpc.ServiceDesc for ClientServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ClientServices",
	HandlerType: (*ClientServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeService",
			Handler:    _ClientServices_SubscribeService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
